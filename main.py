import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from zoneinfo import ZoneInfo

from settings import settings
import db
from payments import router as payments_router
import autobuy

import json
from html import escape
from aiogram.types import BufferedInputFile


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("giftbot")

TZ = ZoneInfo(settings.TIMEZONE)

bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()
dp.include_router(payments_router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π watcher
_watcher_stop = asyncio.Event()
_watcher_task: asyncio.Task | None = None

def _is_admin(user_id: int) -> bool:
    return int(user_id) == int(settings.ADMIN_ID)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@dp.message(F.text == "/start")
async def cmd_start(m: types.Message):
    await db.ensure_user(m.from_user.id, m.from_user.username)
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å ‚≠ê 2000", callback_data="buy:2000")
    kb.button(text="–ë–∞–ª–∞–Ω—Å", callback_data="balance")
    kb.adjust(2)
    text = (
    "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–≤—Ç–æ-–¥–∞—Ä–∏—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–æ–≤.\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/buy [—Å—É–º–º–∞] ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥–∞–º–∏\n"
    "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
    "/autobuy_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–∫—É–ø\n"
    "/autobuy_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–∫—É–ø\n\n"
    "–ü—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—Å–∫—É–ø–∞:\n"
    "/rules ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞\n"
    "/rules_price &lt;min&gt; &lt;max&gt; ‚Äî –∑–∞–¥–∞—Ç—å —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ ‚≠ê\n"
    "/limited_on ‚Äî –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∏–º–∏—Ç–Ω—ã–µ —Å –æ—Å—Ç–∞—Ç–∫–æ–º\n"
    "/limited_off ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏ –æ–±—ã—á–Ω—ã–µ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)\n\n"
    "–°–∫–æ—Ä–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞):\n"
    "/speed_fast [—Å–µ–∫] ‚Äî —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 180 —Å–µ–∫)\n"
    "/speed_base [—Å–µ–∫] ‚Äî –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫)\n"
    "/speed_status ‚Äî —Ç–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"
    )
    await m.answer(text, reply_markup=kb.as_markup())

@dp.callback_query(F.data == "balance")
async def cb_balance(c: types.CallbackQuery):
    bal = await db.get_balance(c.from_user.id)
    await c.message.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {bal} ‚≠ê")
    await c.answer()

@dp.message(F.text.startswith("/balance"))
async def cmd_balance(m: types.Message):
    await db.ensure_user(m.from_user.id, m.from_user.username)
    bal = await db.get_balance(m.from_user.id)
    await m.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {bal} ‚≠ê")

@dp.message(F.text == "/autobuy_on")
async def cmd_ab_on(m: types.Message):
    await db.set_autobuy(m.from_user.id, True)
    await m.answer("–ê–≤—Ç–æ—Å–∫—É–ø –≤–∫–ª—é—á—ë–Ω. –î–∞—Ä–∏–º –Ω–æ–≤—ã–µ –ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ —Ç–≤–æ–∏–º –ø—Ä–∞–≤–∏–ª–∞–º (–µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç ‚≠ê).")

@dp.message(F.text == "/autobuy_off")
async def cmd_ab_off(m: types.Message):
    await db.set_autobuy(m.from_user.id, False)
    await m.answer("–ê–≤—Ç–æ—Å–∫—É–ø –≤—ã–∫–ª—é—á–µ–Ω.")

# ---------- –ü—Ä–∞–≤–∏–ª–∞ ----------
@dp.message(F.text == "/rules")
async def cmd_rules_show(m: types.Message):
    await db.ensure_user(m.from_user.id, m.from_user.username)
    r = await db.get_rules(m.from_user.id)
    only_limited = "–î–∞ (—Ç–æ–ª—å–∫–æ –ª–∏–º–∏—Ç–Ω—ã–µ)" if r["only_limited"] else "–ù–µ—Ç (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã –æ–±—ã—á–Ω—ã–µ)"
    await m.answer(
        f"–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        f"‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∏–º–∏—Ç–Ω—ã–µ: <b>{only_limited}</b>\n"
        f"‚Ä¢ –¶–µ–Ω–∞: <b>{r['min_price']} ‚Äî {r['max_price']}</b> ‚≠ê"
    )

@dp.message(F.text.startswith("/rules_price"))
async def cmd_rules_price(m: types.Message):
    parts = m.text.strip().split()
    if len(parts) < 3:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rules_price <min> <max> (–≤ ‚≠ê)")
    try:
        pmin = int(parts[1])
        pmax = int(parts[2])
    except ValueError:
        return await m.answer("–ú–∏–Ω/–º–∞–∫—Å ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ ‚≠ê. –ü—Ä–∏–º–µ—Ä: /rules_price 100 5000")
    await db.set_price_range(m.from_user.id, pmin, pmax)
    r = await db.get_rules(m.from_user.id)
    await m.answer(f"OK. –¶–µ–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞: <b>{r['min_price']} ‚Äî {r['max_price']}</b> ‚≠ê")

@dp.message(F.text == "/debug_gifts")
async def cmd_debug_gifts(m: types.Message):
    if int(m.from_user.id) != int(settings.ADMIN_ID):
        return await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
    data = await autobuy.fetch_available_gifts_raw()
    js = json.dumps(data, ensure_ascii=False, indent=2)
    # –µ—Å–ª–∏ –≤–ª–µ–∑–∞–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ <pre>, –∏–Ω–∞—á–µ —à–ª–µ–º —Ñ–∞–π–ª–æ–º
    if len(js) < 3800:
        await m.answer(f"<pre>{escape(js)}</pre>")
    else:
        buf = BufferedInputFile(js.encode("utf-8"), filename="getAvailableGifts.json")
        await m.answer_document(buf, caption="Raw getAvailableGifts")


@dp.message(F.text == "/limited_on")
async def cmd_limited_on(m: types.Message):
    await db.set_only_limited(m.from_user.id, True)
    await m.answer("–í–∫–ª—é—á–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ: –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∏–º–∏—Ç–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º.")

# @dp.message(F.text == "/limited_off")
# async def cmd_limited_off(m: types.Message):
#     await db.set_only_limited(m.from_user.id, False)
#     await m.answer("–í—ã–∫–ª—é—á–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ ¬´—Ç–æ–ª—å–∫–æ –ª–∏–º–∏—Ç–Ω—ã–µ¬ª. –¢–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∏ –æ–±—ã—á–Ω—ã–µ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ).")

# ----- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) -----
@dp.message(F.text.startswith("/speed_fast"))
async def cmd_speed_fast(m: types.Message):
    if not _is_admin(m.from_user.id):
        return await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
    parts = m.text.split()
    seconds = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 180
    autobuy.enable_turbo(seconds)
    await m.answer(f"üöÄ –¢—É—Ä–±–æ –≤–∫–ª—é—á—ë–Ω –Ω–∞ {seconds} —Å–µ–∫. –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {autobuy.current_poll_interval():.2f} —Å–µ–∫")

@dp.message(F.text.startswith("/speed_base"))
async def cmd_speed_base(m: types.Message):
    if not _is_admin(m.from_user.id):
        return await m.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.")
    parts = m.text.split()
    try:
        seconds = float(parts[1]) if len(parts) > 1 else 10.0
    except ValueError:
        seconds = 10.0
    autobuy.set_base_interval(seconds)
    await m.answer(f"–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {seconds:.2f} —Å–µ–∫")

@dp.message(F.text == "/speed_status")
async def cmd_speed_status(m: types.Message):
    await m.answer(
        f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {autobuy.current_poll_interval():.2f} —Å–µ–∫\n"
        f"–ë–∞–∑–∞: {autobuy.POLL_BASE_INTERVAL:.2f} —Å–µ–∫\n"
        f"–¢—É—Ä–±–æ –æ—Å—Ç–∞–ª–æ—Å—å: {autobuy.turbo_remaining()} —Å–µ–∫"
    )


# ---------- Watcher lifecycle ----------
async def start_watcher():
    global _watcher_task
    _watcher_stop.clear()
    _watcher_task = asyncio.create_task(autobuy.watcher_loop(bot, _watcher_stop))

async def stop_watcher():
    _watcher_stop.set()
    if _watcher_task:
        try:
            await _watcher_task
        except Exception:
            pass

async def on_startup():
    await db.init_db(settings.DATABASE_URL)
    await autobuy.init_http()          # –µ–¥–∏–Ω–∞—è HTTP-—Å–µ—Å—Å–∏—è
    await start_watcher()
    try:
        await bot.send_message(settings.LOG_CHAT_ID, f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. TZ={settings.TIMEZONE}")
    except Exception:
        pass

async def on_shutdown():
    await stop_watcher()
    await autobuy.close_http()         # –∑–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é

async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
